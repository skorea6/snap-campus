{{>layout/header}}
<div class="flex-fill">
    <section class="section" style="padding-top: 2rem;padding-bottom: 2rem;">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="posts-entry-title" style="font-size: 30px;">가천대학교 장소 Map</h1>
                </div>
            </div>
            <div class="row">
                <h5>지도의 빈 공간을 누르면 장소를 추가하실 수 있습니다</h5>
            </div>
            <div class="row">
                <div class="col-12" style="margin-top: 10px;">
                    <div id="map" style="width:100%;height:400px;"></div>
                </div>
            </div>
        </div>
    </section>

	<!-- Start retroy layout blog posts -->
	<section class="section bg-light">
		<div class="container">
            <div class="row">
                <div class="col-12">
                    <h1 class="posts-entry-title" style="font-size: 30px;">최근 업로드된 사진들</h1>
                </div>
            </div>
            <div class="row">
                <h5>모든 장소, 이벤트에서 업로드된 최근 사진 목록입니다.</h5>
            </div>

            <div class="row align-items-stretch retro-layout">
                {{#allColumnPosts}}
                    <div class="col-md-3">
                        {{#.}}
                            <a href="/post/{{id}}" class="h-entry v-height gradient" style="margin-top: 15px">

                                <div class="featured-img" style="background-image: url('https://image.snapcampus.abz.kr/{{thumbImage}}');"></div>

                                <div class="text">
                                    <span class="date">{{createdAt}}</span>
                                    <h2>{{title}}</h2>
                                </div>
                            </a>
                        {{/.}}
                    </div>
                {{/allColumnPosts}}
            </div>
		</div>
	</section>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">장소 추가</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">장소 이름</label>
                    <input type="text" class="form-control" name="placeName" value="">
                </div>
                <div class="mb-3">
                    <label class="form-label">장소 유형</label>
                    <input type="text" class="form-control" name="placeType" value="">
                </div>
                <div class="mb-3">
                    <label class="form-label">장소 설명</label>
                    <input type="text" class="form-control" name="placeDescription" value="">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                <button type="button" class="btn btn-primary" id="addPlaceButton">장소 추가하기</button>
            </div>
        </div>
    </div>
</div>
<script>
    let coordinate_y = null;
    let coordinate_x = null;

    let isLogined = false;
    {{#auth}}isLogined = true;{{/auth}}

    // Mustache 템플릿을 사용하여 데이터를 JSON 문자열로 변환
    let jsonString = '[{{#places}}{"coordinate_x": "{{coordinate_x}}", "coordinate_y": "{{coordinate_y}}", "id": "{{id}}", "placeName": "{{placeName}}"},{{/places}}]';

    // 마지막 쉼표를 제거
    jsonString = jsonString.replace(/,([\]}])/g, '$1');

    // JSON 문자열을 JavaScript 객체로 변환
    const places = JSON.parse(jsonString.replace(/&quot;/g, '"'));
    console.log(places);

    $(document).ready(function() {
        $('#addPlaceButton').click(function() {
            var placeName = $('input[name="placeName"]').val();
            var placeType = $('input[name="placeType"]').val();
            var placeDescription = $('input[name="placeDescription"]').val();

            var placeData = {
                placeName: placeName,
                placeType: placeType,
                placeDescription: placeDescription,
                coordinate_x: coordinate_x,
                coordinate_y: coordinate_y
            };

            $.ajax({
                url: '/api/map/place/add',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(placeData),
                success: function(response) {
                    alert("장소가 추가되었습니다!");
                    $('#exampleModal').modal('hide');
                    location.href = '/place/' + response.data.id;
                },
                error: function(xhr, status, error) {
                    const errorResponse = JSON.parse(xhr.responseText); // 서버 응답을 JSON으로 파싱
                    alert(errorResponse.statusMessage);  // 오류 메시지 표시
                }
            });
        });
    });

    var mapOptions = {
        center: new naver.maps.LatLng(37.45143458930621, 127.13040967046076),
        zoom: 17
    };

    var map = new naver.maps.Map('map', mapOptions);
    var existingMarkers = []; // 이미 추가된 마커를 저장하는 배열
    // let temp_place = null;

    // 지정된 위도와 경도 범위
    var latMin = 37.441691518620836;
    var latMax = 37.46326213811896;
    var lngMin = 127.1245976455175;
    var lngMax = 127.14096972165339;

    // 클릭한 위치가 지정된 범위 내에 있는지 확인하는 함수
    function isWithinSpecifiedRange(lat, lng) {
        return lat >= latMin && lat <= latMax && lng >= lngMin && lng <= lngMax;
    }

    function isWithinDistance(lat1, lng1, lat2, lng2, threshold) {
        var earthRadius = 6371; // 지구의 반지름(km)
        var dLat = degreesToRadians(lat2-lat1);
        var dLng = degreesToRadians(lng2-lng1);
        var a =
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var distance = earthRadius * c;
        return distance <= threshold; // threshold는 km 단위
    }

    function degreesToRadians(degrees) {
        return degrees * (Math.PI/180);
    }

    function createPlace(id, lat, lng, placeName){
        return new naver.maps.Marker({
            position: new naver.maps.LatLng(lat, lng),
            icon: {
                content: [
                    `<a href="/place/` + id + `"><div style="display: flex; flex-direction: column; align-items: center; width: 80px; height: 30px;">`,
                    ` <div style="display: flex; justify-content: center; align-items: center; width: 30px; height: 30px;">`,
                    ` <img src="https://www.gachon.ac.kr/sites/kor/images/sub/slogan_3.png" style="width: 30px; background-color: white; height: 30px; border-radius: 50%;"/>`,
                    ` </div>`,
                    ` <div style="text-align: center; background-color: yellow; border-radius: 10px; ">` + placeName + `</div>`,
                    `</div></a>`
                ].join(''),
                size: new naver.maps.Size(30, 30),
                scaledSize: new naver.maps.Size(30, 30),
                origin: new naver.maps.Point(0, 0)
            },
            map: map
        });
    }

    places.forEach((place, index) => {
        createPlace(place.id, place.coordinate_x, place.coordinate_y, place.placeName);
    });

    $('#exampleModal').on('hidden.bs.modal', function (e) {
        const tempMarker = existingMarkers.pop();
        tempMarker.setMap(null);
    });

    naver.maps.Event.addListener(map, 'click', function(e) {
        var lat = e.coord.lat();
        var lng = e.coord.lng();
        var canAddMarker = true;

        if(!isWithinSpecifiedRange(lat, lng)) {
            canAddMarker = false;
        }

        // 이미 있는 마커와의 거리를 체크
        for(var i=0; i < existingMarkers.length; i++) {
            var existingMarker = existingMarkers[i];
            if(isWithinDistance(lat, lng, existingMarker.position.lat(), existingMarker.position.lng(), 0.03)) { // 0.05km 이내에 마커가 존재하면 추가하지 않음
                canAddMarker = false;
                break;
            }
        }

        // 새 마커 추가
        if(canAddMarker) {
            if(isLogined == true){
                $('#exampleModal').modal('show');

                coordinate_x = lat;
                coordinate_y = lng;

                var marker = createPlace(0, lat, lng, "신규 장소")
                existingMarkers.push(marker); // 추가된 마커를 배열에 저장
            }else{
                alert("로그인 후 이용 가능합니다.");
            }
        }
    });
</script>
{{>layout/footer}}